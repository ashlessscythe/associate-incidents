// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Associate {
  id                  String                @id @default(uuid())
  name                String                @unique
  ssoid               String?               @unique
  designation         Designation           @default(NONE)
  currentPoints       Float                 @default(0)
  locationId          String?
  location            Location?             @relation(fields: [locationId], references: [id])
  departmentId        String?
  department          Department?           @relation(fields: [departmentId], references: [id])
  occurrences         AttendanceOccurrence[]
  correctiveActions   CorrectiveAction[]
  exportRecords       ExportRecord[]
  notifications       Notification[]
  files               File[]
}

model Location {
  id          String     @id @default(uuid())
  name        String     @unique
  associates  Associate[]
}

model Department {
  id          String     @id @default(uuid())
  name        String     @unique
  associates  Associate[]
}

model ExportRecord {
  id          String  @id @default(uuid())
  associateId String
  associate   Associate @relation(fields: [associateId], references: [id])
  exportedBy  String
  exportedAt  DateTime
  location    String
  department  String
}

model OccurrenceType {
  id          String                 @id @default(uuid())
  code        String                 @unique
  description String
  points      Float
  occurrences AttendanceOccurrence[]
}

model AttendanceOccurrence {
  id              String         @id @default(uuid())
  associateId     String
  associate       Associate      @relation(fields: [associateId], references: [id])
  typeId          String
  type            OccurrenceType @relation(fields: [typeId], references: [id])
  date            DateTime
  notes           String         @default("")
  pointsAtTime    Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  files           File[]
}

model Rule {
  id          String   @id @default(uuid())
  code        String   @unique
  description String
  type        RuleType
  actions     CorrectiveAction[]
}

model NotificationLevel {
  id              String        @id @default(uuid())
  designation     Designation
  level           Int
  name            String
  pointThreshold  Float

  // for upsert
  @@unique([designation, level])
}

model Notification {
  id            String         @id @default(uuid())
  associateId   String
  associate     Associate      @relation(fields: [associateId], references: [id])
  date          DateTime
  type          NotificationType
  level         String
  totalPoints   Float?
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model CorrectiveAction {
  id          String    @id @default(uuid())
  associateId String
  associate   Associate @relation(fields: [associateId], references: [id])
  ruleId      String
  rule        Rule      @relation(fields: [ruleId], references: [id])
  level       Int       // 1 to 4, representing the notification level
  description String    @default("")
  date        DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  files       File[]
}

model File {
  id                    String               @id @default(uuid())
  filename              String
  path                  String
  mimetype              String
  size                  Int
  associate             Associate?           @relation(fields: [associateId], references: [id])
  associateId           String?
  attendanceOccurrence  AttendanceOccurrence? @relation(fields: [attendanceOccurrenceId], references: [id])
  attendanceOccurrenceId String?
  correctiveAction      CorrectiveAction?    @relation(fields: [correctiveActionId], references: [id])
  correctiveActionId    String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
}

enum NotificationType {
  OCCURRENCE
  CORRECTIVE_ACTION
}

enum Designation {
  MH
  CLERK
  INACTIVE
  BRUH
  NONE
}

enum RuleType {
  SAFETY
  WORK
  OPERATIONS
  SIGNAL
}
